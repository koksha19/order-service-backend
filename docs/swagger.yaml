openapi: 3.0.0
info:
  title: Order automation API
  description: This is an API which was creaed as a project at TechMagic academy.
  version: 1.0.0

servers:
  - url: http://localhost:8080
    description: Server which hosts this API

paths:
  /products:
    get:
      tags:
        - main
      summary: Get a list of products
      parameters:
        - name: pagesize
          in: query
          schema:
            type: integer
        - name: page
          in: query
          schema:
            type: integer
      responses:
        "200":
          description: A list of products
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Fetched products successfully
                  products:
                    type: array
                    items:
                      $ref: '#/components/schemas/Products'
                  productCount:
                    type: integer
                    example: 5
        "500":
          description: Sever side error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'

  /products/{productId}:
    get:
      tags:
        - main
      summary: Get a single product
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Fetched product successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Fetched product successfully
                  product:
                    $ref: '#/components/schemas/Products'
        "404":
          description: Failed to find product with this id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404Error'
        "500":
          description: Server side error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
  /cart:
    get:
      tags:
        - cart
      summary: Get customer's cart
      security:
        - bearerAuth: [ ]
      responses:
        "200":
          description: Fetched cart successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  items:
                    type: array
                    items:
                      type: object
                      properties:
                        product:
                          $ref: '#/components/schemas/Product'
                        delivery:
                          $ref: '#/components/schemas/Delivery'
                        quantity:
                          type: integer
                        price:
                          type: number
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401Error'
        "404":
          description: Failed to find product with this id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404Error'
        "500":
          description: Server side error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
    post:
      tags:
        - cart
      summary: Add product to cart
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                product:
                  $ref: '#/components/schemas/Product'
                quantity:
                  type: integer
                delivery:
                  $ref: '#/components/schemas/Delivery'
                price:
                  type: number
      responses:
        "200":
          description: Added product to cart
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  info:
                    type: object
                    properties:
                      product:
                        $ref: '#/components/schemas/Product'
                      delivery:
                        $ref: '#/components/schemas/Delivery'
                      quantity:
                        type: integer
                        example: 5
                      price:
                        type: number
                        example: 1000
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401Error'
        "404":
          description: Failed to find product or customer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404Error'
        "500":
          description: Server side error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'

  /cart/{productId}:
    put:
      tags:
        - cart
      summary: Remove product from cart
      security:
        - bearerAuth: [ ]
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Removed product from cart
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Removed product from cart
                  productId:
                    type: string
                    example: 67b74147330e23ad4c51279a
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401Error'
        "404":
          description: Failed to find product or customer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404Error'
        "500":
          description: Server side error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
  /orders:
    get:
      tags:
        - orders
      summary: Get customer's orders
      security:
        - bearerAuth: [ ]
      responses:
        "200":
          description: Fetched orders successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Fetched orders successfully
                  orders:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401Error'
        "500":
          description: Server side error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
    post:
      tags:
        - orders
      summary: Create a new order
      security:
        - bearerAuth: [ ]
      responses:
        "201":
          description: Created order successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Created order successfully
                  order:
                    $ref: '#/components/schemas/Order'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401Error'
        "500":
          description: Server side error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Product:
      type: object
      properties:
        _id:
          type: string
          example: kljw3l2fsdof993j3
        title:
          type: string
          example: Guitar
        price:
          type: number
          example: 1000
        delivery:
          type: array
          items:
            $ref: '#/components/schemas/Delivery'
        description:
          type: string
          example: A great guitar
        image:
          type: string
          example: https://sc1.musik-produktiv.com/pic-010153533xl/suhr-custom-modern-3ts.jpg
        stock:
          type: number
          example: 5
    Products:
      type: array
      items:
        $ref: '#/components/schemas/Product'
    500Error:
      type: object
      properties:
        message:
          type: string
          example: Some Error
        statusCode:
          type: number
          example: 500
        data:
          type: object
          example: { msg: Message, param: param.name.with.index, value: param value }
    404Error:
      type: object
      properties:
        message:
          type: string
          example: 404 error
        statusCode:
          type: number
          example: 404
    401Error:
      type: object
      properties:
        message:
          type: string
          example: 401 error
        statusCode:
          type: number
          example: 401
    Delivery:
      type: object
      properties:
        name:
          type: string
          example: Standard
        price:
          type: number
          example: 50
        checked:
          type: boolean
          example: true
    Customer:
      type: object
      properties:
        customer:
          type: string
          example: Lev & Co
        email:
          type: string
          example: test@gmail.com
        contactName:
          type: string
          example: Name
        address:
          type: string
          example: Khreshchatyk street 25, Kyiv, 12345
        phone:
          type: string
          example: 123-123-1231
        password:
          type: string
        roles:
          type: object
        cart:
          type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/CartItem'
    CartItem:
      type: object
      properties:
        productId:
          type: string
          example: 67b31e7a1dd7aaecbb98e6fe
        delivery:
          $ref: '#/components/schemas/Delivery'
        quantity:
          type: integer
          example: 5
        price:
          type: number
          example: 1000
    Order:
      type: object
      properties:
        customer:
          $ref: '#/components/schemas/Customer'
        products:
          type: array
          items:
            $ref: '#/components/schemas/OrderProduct'
        date:
          type: string
          example: 2025-02-20T00:00:00.000+00:00
    OrderProduct:
      type: object
      properties:
        product:
          $ref: '#/components/schemas/Product'
        delivery:
          $ref: '#/components/schemas/Delivery'
        quantity:
          type: integer
          example: 5